.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF <Author> 
.ds RF FORMFEED[Page %]
.ds LH INTERNET DRAFT
.ds RH <Issue Date>
.ds CH <Document Title>
.ds CF Expires <Expiry Date>
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'INTERNET-DRAFT''Ulrich Staudinger'
.tl 'Intended Status: <Status, e.g.Proposed Standard>''(as a free man)'
.tl 'Expires: 2014/01''2013/07'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 2
<HTTP-GPG> 
draft-staudinger-00
.fi
.in 3


.ti 0
Abstract

<Abstract Text>


.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2013 IETF Trust and the persons identified as the document authors. All rights reserved.

This document is subject to BCP\078 and the IETF Trust's Legal Provisions Relating to IETF Documents \%(http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section\04.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.



.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Requirements  . . . . . . . . . . . . . . . . . . . . . . .  3
     1.2 Terminology  . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  High level overview  . . . . . . . . . . . . . . . . . . . . .  3
     2.1  Successful session example  . . . . . . . . . . . . . . . .  4
     2.2  Unsuccessful session example  . . . . . . . . . . . . . . .  4
     2.3 Pseudo Code  . . . . . . . . . . . . . . . . . . . . . . . .  5
   3.  Details  . . . . . . . . . . . . . . . . . . . . . . . . . . .  6
     3.1 Case diagram . . . . . . . . . . . . . . . . . . . . . . . .  6
     3.2 New HTTP header fields . . . . . . . . . . . . . . . . . . .  6
   4.  Title  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  6
   5  Security Considerations . . . . . . . . . . . . . . . . . . . .  8
   6  IANA Considerations . . . . . . . . . . . . . . . . . . . . . .  8
   7  References  . . . . . . . . . . . . . . . . . . . . . . . . . .  8
     7.1  Normative References  . . . . . . . . . . . . . . . . . . .  8
     7.2  Informative References  . . . . . . . . . . . . . . . . . .  8
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . .  8
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1  Introduction

While there are reliable ways to implement person-to-person security for email, 
it is striking that no such concept exists for HTTP. The traditional approaches 
TLS and SSL are flawed as it requires people to have solid technical knowledge
to understand the implications of their actions.  

GPG offers end user oriented, personal information security. 
Using GPG, it is possible to reliably verify the identity of a 
communication partner and to send 
securely encrypted messages to a communication partner. Messages are only readable
by the receiver that has the decryption key. 

At present, there is no standardized approach to deploy GPG in an HTTP context. 
This document closes this gap and defines a way how communication partners must 
conduct GPG encrypted HTTP communication.   

.ti 0
1.1  Requirements

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC2119].

The Initiator is the communication initiating party in our HTTP context, 
it opens a connection and sends the HTTP request. 

The Responder is the request receiving party, it answers with an 
HTTP conform response.  

.ti 0
1.2 Terminology




.ti 0
2.  High level overview

The Initiator opens a socket connection to the Responder. Upon successful connection, it may send an HTTP POST request with a set request header field GPG-Enclosed set to any value. If the Initiator sends a POST request with the GPG-Enclosed field set, it must post a multipart-form request that contains a GPG encrypted HTTP request. 

This encapsulated HTTP request may have the GPG-Required request parameter set to any value. 
If it is present, the HTTP request must contain a GPG-Identity parameter that specifies
the identity of the Initiator. If the the GPG-Identity parameter is set, the Initiator must include the GPG signature of the entire encapsulated request except the GPG-Identity header field and its value in a GPG-Signature parameter. 

The Responder receives an HTTP request. If the GPG-Enclosed field is set, it takes the first form data and tries to decrypt it. If it cannot decipher the message, it must respond with the appropriate HTTP 
error code. If it can decipher the message, for example as it was encrypted with the Responder's public key, it will take the decrypted message and will treat it like a new HTTP request. The Responder may now process the encapsulated HTTP request and may assemble an HTTP response. If the decrypted HTTP request contains the header field GPG-Required, it must encrypt the response with the public key for the identity specified in the request header field GPG-Identity. If the responder does not have the public key for the specified GPG-Identity, it must respond with an appropriate HTTP error code. If the GPG-Identity request parameter is present, the Responder must use the GPG-Signature field, strip it and verify the signature over the resulting request. If the signature is not valid, the Responder may reject the request and may respond with an appropriate HTTP error code.  If the signature is valid, the server may send the encrypted response in the HTTP response body. It must include the signature of the request body. If it sends an GPG encrypted response, it must set the response parameter Content-Type to application/gpg-encrypted. 

The Initiator now receives the response and treats in the same way as the Responder treated the 
Initiator's request. If the Content-Type parameter of the HTTP response is set to gpg-encrypted, the Initiator 
must decrypt it with its identity to receive the unencrypted, actual response. The actual response is a full HTTP response include HTTP status fields, response header fields and a GPG-Signature field. 
The Initiator must strip the GPG-Signature field and verifies the signature over the resulting HTTP response. 

The Initiator may send a HEAD request the responder with the header field GPG-Identity-Probe set to any value. If the Responder receives such a request, it may respond with its public identity. 




.ti 0
2.1  Successful session example

Some txt 

.ti 0
2.2  Unsuccessful session example 

.ti 0
2.3 Pseudo Code

The following pseudo code exemplifies the entire specification. For the
sake of clarity, the word Initiator is abbreviated as I. and the word
Responder is abbreviated as R.


.in 6
.nf
If I. knows the R.'s public GPG Key: 
  * I. crafts the original HTTP request
  * I. adds additional HTTP-GPG headers as needed:
    If I. wants to receive encrypted response:
       * I. adds GPG-Identity header with his own identity
  * I. encapsulates the request in a signed GPG packet
  * I. encrypts signed packet with R.'s public key
  * I. crafts 2nd HTTP POST request with ciphered packet 
     as first part of a multipart/form-data request
     and mime type gpg-encrypted
  * I. may now calculate the signature for that package and 
    may add the signature as the second part of the multipart/form-data
    request
  * I. sends 2nd HTTP POST request to the R.
Else:
  If I. wants to communicate with the R.: 
    * I. crafts an HTTP GET request
    If I. wants to get to know the Responder's public key:
      * I. adds header field GPG-Key-Request to the request
    If I. wants to get the Responder's identity:
      * I. adds header field GPG-Identity-Request
    * I. sends the HTTP GET request and waits for response
  Else:
    * I. doesn't send message. 

If R. receives a request:
  If request is NOT a HTTP POST request:
    * R. starts an HTTP response packet
    * R. analyses the request header:
      If GPG-Identity-Request is present:
        * R. adds his own public identity to response header
      If the GPG-Key-Request is present:
        * R. sets his own public key as the response body 
      Else:
        * R. processes request as usual
        If the GPG-Identity is present: 
          If R. has the public key for this GPG identity: 
            * R. encrypts entire response with public key
            * R. encapsulates encrypted response as the ..
                response body with mimetype type gpg-encrypted
          Else:
            * R. returns an HTTP error message. 
  Else:
    If POST request contains a gpg-encrypted form data chunk:
      * R. tries to decrypt the request parameter
      If R. did not successfully decrypted the request parameter:
        * R. returns an appropriate error code. 
    If POST request contains a signature form data chunk: 
      * R. looks into the decrypted request paramet
        If gpg-signature parameter is present in actual request: 
          If gpg-identity parameter is present:  
	   * R. removes the gpg-signature parameter from the actual request
            * R calculates the checksum of the resulting request
            If calculated checksum matches 

  
Else:
  Idle around. 



.ti 0
3.  Details

Some text here

.ti 0 
3.1 Case diagram 



.ti 0
3.2 New HTTP header fields 

some text here.




.ti 0
4.  Title

.\" Comment line providing info for the Authors or the RFC Editor
<Document text>

.in 6
.nf
Definitions and code {
  line 1
  line 2
}
.fi
.in 3

.\" Directives (e.g .ti and .in) and escape sequences (\, \&, \%, \" and \0) are used to control
.\" Formatting and are not displayed in the text document.

Special characters examples:
 
The characters \0, \&, \%, \" are not shown in text.
.\"
.\" You can display these character sequences in the text document by
.\" inserting the escape character '\'.
However, the characters \\0, \\&, \\%, \\" are displayed.

\&.ti 0  is displayed in text instead of used as a directive. 
.br
\&.\\"  is displayed in document instead of being treated as a comment

C:\\dir\\subdir\\file.ext  Shows inclusion of backslash "\\".


.bp
.ti 0
5  Security Considerations

<Security considerations text>


.ti 0
6  IANA Considerations

<IANA considerations text>


.ti 0
7  References

.ti 0 
7.1  Normative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 2119;KEYWORDS, 1776, RFC1925;TRUTHS
.ti 3
[KEYWORDS] Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP\014, RFC\02119, March 1997.

.ti 3
[RFC1776]  Crocker, S., "The Address is the Message", RFC\01776, April 1 1995.

.ti 3
[TRUTHS]   Callon, R., "The Twelve Networking Truths", RFC\01925, April 1 1996.

.\" \# ERF -- End of managed reference list
.\" ----------------------------------------
.\" The reference list can be changed at any time by altering the RFC list in the line below the .\" \# REF directive
.\" In order to execute any change, click on the 'Update All' button or select "Update 'Table of Contents' and References"
.\" from the "Edit" menu or press <F3>.
.\" NOTE: Managed reference list requires NroffEdit version 1.40 or later.

.ti 0
7.2  Informative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 3514;EVILBIT, 5513, 5514
.ti 3
[EVILBIT]  Bellovin, S., "The Security Flag in the IPv4 Header", RFC\03514, April 1 2003.

.ti 3
[RFC5513]  Farrel, A., "IANA Considerations for Three Letter Acronyms", RFC\05513, April 1 2009.

.ti 3
[RFC5514]  Vyncke, E., "IPv6 over Social Networks", RFC\05514, April 1 2009.

.\" \# ERF -- End of managed reference list
.in 3


.ti 0
Authors' Addresses

.sp
.nf
Ulrich Staudinger
Steinhofhalde 3
6005 Luzern
Switzerland

EMail: ustaudinger@activequant.com 
.sp
.fi

